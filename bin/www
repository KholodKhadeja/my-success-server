
var app = require('../app');
var debug = require('debug')('mysuccess-server:server');
var http = require('http');
const connectToDB = require("../models/connectToDB");

process.on('uncaughtException', err => {
  debug('uncaughtException');
  debug(err.name, err.message);
  debug(err);
  debug('Shutting down');
  server.close(() => {
    process.exit(1);
  });
});

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


var server = http.createServer(app);

connectToDB.then(() => {
    debug("connected to db");
  })
  .catch((err) => {
    debug("fatal error");
    debug(err);
    process.exit(1);
  });

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;


  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

